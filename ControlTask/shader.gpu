

// Vertex shader
const vertexShaderSource = `#version 300 es

in vec3 inVertex;
in vec3 inNormal;
in vec3 inTangent;
in vec2 inUV;

uniform mat4 projectionMatrix;
uniform mat4 modelMatrix;
uniform mat4 normalMatrix;

out vec3 fragNormal;
out vec3 fragVertex;
out vec3 fragTangent;
out vec2 fragUV;

void main() {
    vec4 vertex = modelMatrix * vec4(inVertex, 1.0);
    vertex /= vertex.w;

    fragVertex = vertex.xyz;
    fragNormal = normalize(mat3(normalMatrix) * inNormal);
    fragTangent = normalize(mat3(normalMatrix) * inTangent);
    fragUV = inUV;

    gl_Position = projectionMatrix * vertex;
}`;

// Fragment shader
const fragmentShaderSource = `#version 300 es
precision highp float;

out vec4 outColor; 

in vec3 fragNormal;
in vec3 fragVertex;
in vec3 fragTangent;
in vec2 fragUV;

uniform vec3 lightLocation;
uniform sampler2D diffuseTexture;
uniform sampler2D normalTexture;
uniform sampler2D specularTexture;

vec3 calculateNormal()
{
    vec3 normal = fragNormal;
    vec3 tangent = fragTangent;

    normal = normalize(normal - dot(tangent, normal) * tangent);

    vec3 bitangent = cross(tangent, normal);
    vec3 normalMap = texture(normalTexture, fragUV).rgb;
    normalMap = 2.0 * normalMap - vec3(1.0, 1.0, 1.0);

    mat3 TBN = mat3(tangent, bitangent, normal);
    return normalize(TBN * normalMap);
}

void main() {
    const float ambientFactor = 0.2;
    vec3 color = texture(diffuseTexture, fragUV).rgb;
    float specularFactor = pow(texture(specularTexture, fragUV).r, 1.0);

    vec3 N = calculateNormal();
    vec3 L = normalize(fragVertex.xyz - lightLocation);
    vec3 V = normalize(-fragVertex); 

    if( dot(N, V) < 0.0) {
        N = -N;
    }

    vec3 ambient = color * ambientFactor;
    vec3 diffuse = vec3(max(dot(N, -L), 0.0)) * color * (1.0 - ambientFactor);
    vec3 R = reflect(L, N);
    vec3 specular = vec3(specularFactor) * pow(max(dot(V, R), 0.0), 32.0);

    outColor = vec4(ambient + diffuse + specular, 1.0);
}`;