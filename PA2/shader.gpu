

// Vertex shader
const vertexShaderSource = `#version 300 es

in vec3 inVertex;
in vec3 inNormal;

uniform mat4 projectionMatrix;
uniform mat4 modelMatrix;
uniform mat4 normalMatrix;

out vec3 fragNormal;
out vec3 fragVertex;

void main() {
    vec4 vertex = modelMatrix * vec4(inVertex, 1.0);
    vertex /= vertex.w;

    fragVertex = vertex.xyz;
    fragNormal = normalize(mat3(normalMatrix) * inNormal);

    gl_Position = projectionMatrix * vertex;
}`;


// Fragment shader
const fragmentShaderSource = `#version 300 es
precision highp float;

out vec4 outColor; 

in vec3 fragNormal;
in vec3 fragVertex;

uniform vec3 color;
uniform vec3 lightLocation;

void main() {
    const float ambientFactor = 0.2;

    vec3 N = normalize(fragNormal);
    vec3 L = normalize(fragVertex.xyz - lightLocation);
    vec3 V = normalize(-fragVertex); 

    if( dot(N, V) < 0.0) {
        N = -N;
    }

    vec3 ambient = color * ambientFactor;
    vec3 diffuse = vec3(max(dot(N, -L), 0.0)) * color * (1.0 - ambientFactor);
    vec3 R = reflect(L, N);
    vec3 specular = vec3(0.6) * pow(max(dot(V, R), 0.0), 32.0);

    outColor = vec4(ambient + diffuse + specular, 1.0);
}`;